# Generated by Django 4.2.1 on 2023-06-01 13:11

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Network',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chain_id', models.PositiveBigIntegerField()),
                ('name', models.CharField(max_length=255)),
                ('rpc_url', models.CharField(max_length=2550)),
                ('max_step', models.PositiveBigIntegerField(default=1000)),
                ('type', models.CharField(choices=[('filterable', 'Filterable'), ('no_filters', 'No Filters')], max_length=255)),
                ('need_poa', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Token',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, max_length=42, null=True)),
                ('name', models.CharField(max_length=255)),
                ('strategy', models.CharField(choices=[('event_based_transfer', 'Event Based Transfer'), ('receipt_based_transfer', 'Receipt Based Transfer')], max_length=255)),
                ('type', models.CharField(choices=[('native', 'Native'), ('erc20', 'Erc20'), ('erc721', 'Erc721'), ('erc777', 'Erc777'), ('erc1155', 'Erc1155')], max_length=255)),
                ('total_supply', models.DecimalField(decimal_places=0, default=0, max_digits=78)),
                ('volume', models.DecimalField(decimal_places=0, default=0, max_digits=78)),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tokens', to='indexer_api.network')),
            ],
        ),
        migrations.CreateModel(
            name='TokenTransfer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operator', models.CharField(blank=True, max_length=42, null=True)),
                ('sender', models.CharField(max_length=42)),
                ('token_id', models.DecimalField(blank=True, decimal_places=0, max_digits=78, null=True)),
                ('amount', models.DecimalField(blank=True, decimal_places=0, max_digits=78, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TokenBalance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('holder', models.CharField(max_length=42)),
                ('token', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='balances', to='indexer_api.token')),
            ],
        ),
        migrations.CreateModel(
            name='Indexer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('last_block', models.PositiveBigIntegerField(default=0)),
                ('strategy', models.CharField(choices=[('recipient', 'Recipient'), ('sender', 'Sender'), ('token_scan', 'Token Scan'), ('tokenomics', 'Tokenomics')], max_length=255)),
                ('short_sleep_seconds', models.PositiveBigIntegerField(default=1, verbose_name='Short sleep is time between two filter requests to blockchain')),
                ('long_sleep_seconds', models.PositiveBigIntegerField(default=5, verbose_name='Indexer will sleep this time if no new blocks in blockchain by the moment')),
                ('strategy_params', models.JSONField(verbose_name="Configure indexer's strategy using JSON dict")),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='indexers', to='indexer_api.network')),
                ('watched_tokens', models.ManyToManyField(related_name='indexers', to='indexer_api.token')),
            ],
        ),
    ]
